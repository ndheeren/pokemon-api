const express = require("express");
const flash = require('express-flash');
const mongoose = require('mongoose');
const session = require('express-session');

const app = express();

// app.use(express.static(__dirname + "/static"));
app.use(express.static( __dirname + '/public/dist/public' ));

app.use(express.urlencoded({extended: true}));

app.use(express.json());

app.use(flash());

app.use(session({
    secret: 'keyboardkitteh',
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: 60000 }
}))

mongoose.connect('mongodb://localhost/restfulTasksDb', {useNewUrlParser: true});

// creating the schema(s)
const TaskSchema = new mongoose.Schema({
    // _id: (string) (default id generated by mongoDB)

    // title: (string)
    title: { type: String, required: true, minlength: 3},

    // description: (string, default to empty string)
    description: { type: String, default: ''},

    // completed: (boolean, default to: false)
    completed: { type: Boolean, default: false},

    // created_at: (date, default to current date)
    created_at: { type: Date, default: Date.now()},

    // updated_at: (date, default to current date)
    updated_at: { type: Date, default: Date.now()},
})

// create an object(s) that contains methods for mongoose to interface with MongoDB
const Task = mongoose.model('Task', TaskSchema);

app.set('view engine', 'ejs');
app.set('views', __dirname + '/views');

// used JSONView extension (Chrome) to make the JSON render prettily

// index
// GET: Retrieve all Tasks
// app.get('/', (req, res) => {
app.get('/allTasks', (req, res) => {
    Task.find()
        .then(tasks => res.json(tasks))
        .catch(err => res.json(err));
});


// GET: Retrieve a Task by ID
app.get('/tasks/:id', (req, res) => {
    Task.findOne({_id: req.params.id})
        .then(task => res.json(task))
        .catch(err => res.json(err));
});

// page with form for creating a task
app.get('/new', (req, res) => {
    res.render("createTask")
});

// POST: Create a Task
app.post('/tasks', (req, res) => {
    // create the task
    // console.log(req)
    const task = new Task();
    task.title = req.body.title;
    task.description = req.body.description;
    task.completed = req.body.completed;
    task.save()
        .then(newTask => {
            res.redirect('/');
        })
        .catch(err => {
            console.log("We have an error!", err);
            // adjust the code below as needed to create a flash message with the tag and content you would like
            for (var key in err.errors) {
                req.flash('registration', err.errors[key].message);
            }
            res.redirect('/');
        })
});

// page with form for editing a task
app.get('/edit/:id', (req, res) => {
    Task.findOne({_id: req.params.id})
        .then(taskData => {
            res.render("editTask", {task: taskData})
        })
        .catch(err => res.json(err));
});

// PUT: Update a Task by ID
app.put('/tasks/:id', (req, res) => {
    Task.findOne({_id: req.params.id})
        .then(task => {
            task.title = req.body.title;
            task.description = req.body.description;
            task.completed = req.body.completed;
            task.save()
                .then(editedTask => {
                    res.redirect('/');
                })
                .catch(err => {
                    console.log("We have an error!", err);
                    // adjust the code below as needed to create a flash message with the tag and content you would like
                    for (var key in err.errors) {
                        req.flash('registration', err.errors[key].message);
                    }
                    res.redirect('/');
                })
        })
        .catch(err => res.json(err));
});

// DELETE: Delete a Task by ID
app.delete('/tasks/:id/', (req, res) => {
    Task.remove({_id: req.params.id})
    .then(deletedTask => {
        console.log(`DELETED A TASK!.`);
        res.redirect('/');
    })
    .catch(err => res.json(err));
});

app.listen(8000, () => console.log("listening on port 8000"));